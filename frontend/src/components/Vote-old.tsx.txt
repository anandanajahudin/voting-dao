import React, { useState } from "react"
import { Identity } from "@semaphore-protocol/identity"
import { Group } from "@semaphore-protocol/group"
import { generateProof } from "@semaphore-protocol/proof"
import { packToSolidityProof } from "../utils/packToSolidityProof"

interface VoteProps {
  proposalId: number
  options: string[]
  onVote: (
    proposalId: number,
    optionIndex: number,
    signalHash: bigint,
    nullifierHash: bigint,
    merkleRoot: bigint,
    proof: bigint[]
  ) => Promise<void>
  memberMerkleRoot: bigint
}

const Vote: React.FC<VoteProps> = ({
  proposalId,
  options,
  onVote,
  memberMerkleRoot
}) => {
  const [selectedOption, setSelectedOption] = useState<number>(0)
  const [isSubmitting, setIsSubmitting] = useState<boolean>(false)

  const handleVote = async () => {
    setIsSubmitting(true)

    try {
      const identityData = localStorage.getItem("identity")
      if (!identityData) {
        alert("No identity found. Please register first.")
        return
      }

      const identity = new Identity(identityData)
      const group = new Group()
      group.addMember(identity.commitment)

      const signal = `VOTE_${options[selectedOption]}`
      const externalNullifier = proposalId

      const fullProof = await generateProof(
        identity,
        group,
        memberMerkleRoot.toString(),
        signal,
        externalNullifier,
        {
          wasm: "/semaphore/semaphore.wasm",
          zkey: "/semaphore/semaphore.zkey"
        }
      ) as any

      if (!fullProof || !fullProof.proof || !fullProof.publicSignals) {
        console.error("Proof generation failed:", fullProof)
        throw new Error("Proof generation failed or returned invalid data.")
      }

      const { proof, publicSignals } = fullProof
      console.log("Full proof:", fullProof)

      const solidityProof = packToSolidityProof(proof)

      await onVote(
        proposalId,
        selectedOption,
        BigInt(publicSignals.signalHash),
        BigInt(publicSignals.nullifierHash),
        BigInt(publicSignals.merkleRoot),
        solidityProof.map((x: any) => BigInt(x))
      )
    } catch (error: any) {
      console.error("Voting error:", error)
      alert("Failed to submit vote: " + (error.message || "Unknown error"))
    } finally {
      setIsSubmitting(false)
    }
  }

  return (
    <div style={{ marginTop: "1rem" }}>
      <select
        value={selectedOption}
        onChange={(e) => setSelectedOption(Number(e.target.value))}
        disabled={isSubmitting}
      >
        {options.map((opt, idx) => (
          <option value={idx} key={idx}>
            {opt}
          </option>
        ))}
      </select>
      <button
        onClick={handleVote}
        disabled={isSubmitting}
        style={{ marginLeft: "1rem" }}
      >
        {isSubmitting ? "Submitting..." : "Submit Vote"}
      </button>
    </div>
  )
}

export default Vote
